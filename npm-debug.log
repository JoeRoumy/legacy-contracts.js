0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.10.1
3 info using node@v0.12.4
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec { raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/home/andreas/WebstormProjects/eris-contracts.js',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /home/andreas/.npm/eris-contracts/0.10.5/package.tgz not in flight; packing
9 verbose tar pack [ '/home/andreas/.npm/eris-contracts/0.10.5/package.tgz',
9 verbose tar pack   '/home/andreas/WebstormProjects/eris-contracts.js' ]
10 verbose tarball /home/andreas/.npm/eris-contracts/0.10.5/package.tgz
11 verbose folder /home/andreas/WebstormProjects/eris-contracts.js
12 info prepublish eris-contracts@0.10.5
13 verbose addLocalTarball adding from inside cache /home/andreas/.npm/eris-contracts/0.10.5/package.tgz
14 silly cache afterAdd eris-contracts@0.10.5
15 verbose afterAdd /home/andreas/.npm/eris-contracts/0.10.5/package/package.json not in flight; writing
16 verbose afterAdd /home/andreas/.npm/eris-contracts/0.10.5/package/package.json written
17 silly publish { name: 'eris-contracts',
17 silly publish   version: '0.10.5',
17 silly publish   scripts: { test: 'mocha' },
17 silly publish   dependencies:
17 silly publish    { 'bignumber.js': 'github:debris/bignumber.js#master',
17 silly publish      'crypto-js': '^3.1.4',
17 silly publish      'eris-db': '^0.10.13' },
17 silly publish   devDependencies: { chai: '^2.1.1', 'ink-docstrap': '~0.5.2' },
17 silly publish   repository:
17 silly publish    { type: 'git',
17 silly publish      url: 'git+https://github.com/eris-ltd/eris-contracts.js.git' },
17 silly publish   homepage: 'https://github.com/eris-ltd/eris-contracts.js',
17 silly publish   bugs: { url: 'https://github.com/eris-ltd/eris-contracts.js/issues' },
17 silly publish   keywords:
17 silly publish    [ 'eris',
17 silly publish      'solidity',
17 silly publish      'node.js',
17 silly publish      'dapp',
17 silly publish      'tendermint',
17 silly publish      'eris-db',
17 silly publish      'RPC' ],
17 silly publish   author: { name: 'AndreasEris' },
17 silly publish   authors:
17 silly publish    [ { name: 'Andreas Olofsson',
17 silly publish        email: 'andreas@erisindustries.com',
17 silly publish        url: 'http://erisindustries.com' } ],
17 silly publish   license: 'LGPL-3.0',
17 silly publish   readme: '# Dapp - the dapp library.\n\n**NOTE: This library is used to call contracts from javascript. This is a work in progress and is not intended for public use. ETA july 2015**\n\n## Creating and running contracts.\n\nFirst of all you need a running eris-db server. Either use cli to create a chain and serve it (if that\'s possible yet), or do it the hard way (some instructions on how to set up a simple chain [here](https://github.com/eris-ltd/eris-db.js/tree/master/templates/example_database)).\n\nAfter that you need to clone this library. Make sure to `npm update` to pull in the dependencies. Normally you\'d npm both this and eris-db.js, but there\'s no npm package for contracts yet so might as well develop inside the lib (put the code inside this repo). This is how you would prepare everything:\n\n```\n// Dependencies assuming we\'re in eris-contracts.js root. Otherwise modify.\nvar edbModule = require("eris-db");\nvar DevPipe = require(\'./lib/pipes/dev_pipe\');\n// Yes, it is a factory factory right now. Ethereums fault.\nvar cff = require(\'./index\');\n\n// The private key to use.\nvar testPrivKey = "123412341234..."\n\n// Create a new edb at whatever url is appropriate (localhost:1337 is the default).\nvar edb = edbModule.createInstance("http://localhost:1337/rpc\');\n// Create the dev_pipe, which is the pipe that uses edb\'s transact method (the one which takes a private key for signing).\nvar pipe = new DevPipe(edb, testPrivKey);\n// Create the contracts object.\nvar contracts = cff.createInstance(pipe);\n```\n\nNow it is ready to be used. The `contracts` object works exactly like the web3 one, except it isn\'t tied to the web3 object.\n\n```\nvar myAbi = [...];\nvar myCompiledCode = "";\n\n// Create factory from abi.\nvar contractFactory = contracts(myAbi);\n\n// To create a new contract (actually deploy and wait for the contract to be committed to a block etc.) use  `new`:\nvar myContract;\ncontractFactory.new({data: code}, function(error, contract){\n    if (error) {\n        // Just do something.\n        throw error;\n    }\n    myContract = contract;\n});\n```\n\nYou can stick up to two constructor arguments before the `{data: code}` param, though I haven\'t tested that with this system yet. This is btw. why you have to use an object (TxPayload - it\'s documented) instead of just a string. Will probably force the constructor params to be in an array later so that the payload can just be a code string as well as an object. Would be easier to verify then now with the variadic stuff.\n\nNote the regular error-first "node-back" callback for new contracts. This is used in all other contract methods as well since they\'re all IO, and because it\'s better. The example in `./test/live/create_and_event.js` shows how to do calls to the contracts add method. May/should add promises as an alternative later.\n\n```\nmyContract.add(34, 22, function(error, sum){\n    console.log(sum);\n}\n```\n\nThe format is: params followed by the error-first callback. Always the same.\n\n\nWARNING: I have not tested these instructions, only copied from the create_and_call example. They may or may not work. I will also not be around to answer any questions for a while. If it\'s hard, then the only solution is to wait until the library is finished. It will probably take about a week + the work solidity events and server side stuff takes + eris-cli integration, starting when i get back on july 6th.\n\n## Objects and formats\n\n\n\n## Unit tests\n\n`mocha` or `npm test`\n\n## Web3 licence\n\nThis library is built on [web3.js](https://github.com/ethereum/web3.js). Here is the licence used at the time of pulling in the code (2015-06-21):\n\n```\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n```',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: '761026cafe240ed24abd5108ee10c8a3c240b23b',
17 silly publish   description: '**NOTE: This library is used to call contracts from javascript. This is a work in progress and is not intended for public use. ETA july 2015**',
17 silly publish   _id: 'eris-contracts@0.10.5',
17 silly publish   _shasum: '0f5f6b6b9a6eda9acce7aacc1c52c26cf84cfaf6',
17 silly publish   _from: '.' }
18 verbose getPublishConfig undefined
19 silly mapToRegistry name eris-contracts
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry https://registry.npmjs.org/
22 silly mapToRegistry uri https://registry.npmjs.org/eris-contracts
23 verbose publish registryBase https://registry.npmjs.org/
24 silly publish uploading /home/andreas/.npm/eris-contracts/0.10.5/package.tgz
25 verbose request uri https://registry.npmjs.org/eris-contracts
26 verbose request sending authorization for write operation
27 info attempt registry request try #1 at 18:14:36
28 verbose request using bearer token for auth
29 verbose request id a7923069843d0439
30 http request PUT https://registry.npmjs.org/eris-contracts
31 http 403 https://registry.npmjs.org/eris-contracts
32 verbose headers { 'content-type': 'application/json',
32 verbose headers   'cache-control': 'max-age=60',
32 verbose headers   'content-length': '96',
32 verbose headers   'accept-ranges': 'bytes',
32 verbose headers   date: 'Thu, 09 Jul 2015 16:14:34 GMT',
32 verbose headers   via: '1.1 varnish',
32 verbose headers   connection: 'keep-alive',
32 verbose headers   'x-served-by': 'cache-ams4134-AMS',
32 verbose headers   'x-cache': 'MISS',
32 verbose headers   'x-cache-hits': '0',
32 verbose headers   'x-timer': 'S1436458473.326625,VS0,VE1037' }
33 verbose request invalidating /home/andreas/.npm/registry.npmjs.org/eris-contracts on PUT
34 error publish Failed PUT 403
35 verbose stack Error: "You cannot publish over the previously published version 0.10.5." : eris-contracts
35 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:247:14)
35 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:170:14)
35 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:368:22)
35 verbose stack     at Request.emit (events.js:110:17)
35 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1219:14)
35 verbose stack     at Request.emit (events.js:129:20)
35 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1167:12)
35 verbose stack     at IncomingMessage.emit (events.js:129:20)
35 verbose stack     at _stream_readable.js:908:16
35 verbose stack     at process._tickCallback (node.js:355:11)
36 verbose statusCode 403
37 verbose pkgid eris-contracts
38 verbose cwd /home/andreas/WebstormProjects/eris-contracts.js
39 error Linux 3.16.0-23-generic
40 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
41 error node v0.12.4
42 error npm  v2.10.1
43 error code E403
44 error "You cannot publish over the previously published version 0.10.5." : eris-contracts
45 error If you need help, you may report this error at:
45 error     <https://github.com/npm/npm/issues>
46 verbose exit [ 1, true ]
